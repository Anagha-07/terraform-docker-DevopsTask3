[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Reusing previous version of kreuzwerker/docker from the dependency lock file
- Using previously-installed kreuzwerker/docker v2.13.0

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # docker_container.nginx[0m will be created
[0m  [32m+[0m[0m resource "docker_container" "nginx" {
      [32m+[0m[0m attach           = false
      [32m+[0m[0m bridge           = (known after apply)
      [32m+[0m[0m command          = (known after apply)
      [32m+[0m[0m container_logs   = (known after apply)
      [32m+[0m[0m entrypoint       = (known after apply)
      [32m+[0m[0m env              = (known after apply)
      [32m+[0m[0m exit_code        = (known after apply)
      [32m+[0m[0m gateway          = (known after apply)
      [32m+[0m[0m hostname         = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m image            = "nginx:latest"
      [32m+[0m[0m init             = (known after apply)
      [32m+[0m[0m ip_address       = (known after apply)
      [32m+[0m[0m ip_prefix_length = (known after apply)
      [32m+[0m[0m ipc_mode         = (known after apply)
      [32m+[0m[0m log_driver       = "json-file"
      [32m+[0m[0m logs             = false
      [32m+[0m[0m must_run         = true
      [32m+[0m[0m name             = "my-nginx-container"
      [32m+[0m[0m network_data     = (known after apply)
      [32m+[0m[0m read_only        = false
      [32m+[0m[0m remove_volumes   = true
      [32m+[0m[0m restart          = "no"
      [32m+[0m[0m rm               = false
      [32m+[0m[0m security_opts    = (known after apply)
      [32m+[0m[0m shm_size         = (known after apply)
      [32m+[0m[0m start            = true
      [32m+[0m[0m stdin_open       = false
      [32m+[0m[0m tty              = false

      [32m+[0m[0m healthcheck (known after apply)

      [32m+[0m[0m labels (known after apply)

      [32m+[0m[0m ports {
          [32m+[0m[0m external = 8080
          [32m+[0m[0m internal = 80
          [32m+[0m[0m ip       = "0.0.0.0"
          [32m+[0m[0m protocol = "tcp"
        }
    }

[1m  # docker_image.nginx[0m will be created
[0m  [32m+[0m[0m resource "docker_image" "nginx" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m latest      = (known after apply)
      [32m+[0m[0m name        = "nginx:latest"
      [32m+[0m[0m output      = (known after apply)
      [32m+[0m[0m repo_digest = (known after apply)
    }

[1mPlan:[0m 2 to add, 0 to change, 0 to destroy.
[0m[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # docker_container.nginx[0m will be created
[0m  [32m+[0m[0m resource "docker_container" "nginx" {
      [32m+[0m[0m attach           = false
      [32m+[0m[0m bridge           = (known after apply)
      [32m+[0m[0m command          = (known after apply)
      [32m+[0m[0m container_logs   = (known after apply)
      [32m+[0m[0m entrypoint       = (known after apply)
      [32m+[0m[0m env              = (known after apply)
      [32m+[0m[0m exit_code        = (known after apply)
      [32m+[0m[0m gateway          = (known after apply)
      [32m+[0m[0m hostname         = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m image            = "nginx:latest"
      [32m+[0m[0m init             = (known after apply)
      [32m+[0m[0m ip_address       = (known after apply)
      [32m+[0m[0m ip_prefix_length = (known after apply)
      [32m+[0m[0m ipc_mode         = (known after apply)
      [32m+[0m[0m log_driver       = "json-file"
      [32m+[0m[0m logs             = false
      [32m+[0m[0m must_run         = true
      [32m+[0m[0m name             = "my-nginx-container"
      [32m+[0m[0m network_data     = (known after apply)
      [32m+[0m[0m read_only        = false
      [32m+[0m[0m remove_volumes   = true
      [32m+[0m[0m restart          = "no"
      [32m+[0m[0m rm               = false
      [32m+[0m[0m security_opts    = (known after apply)
      [32m+[0m[0m shm_size         = (known after apply)
      [32m+[0m[0m start            = true
      [32m+[0m[0m stdin_open       = false
      [32m+[0m[0m tty              = false

      [32m+[0m[0m healthcheck (known after apply)

      [32m+[0m[0m labels (known after apply)

      [32m+[0m[0m ports {
          [32m+[0m[0m external = 8080
          [32m+[0m[0m internal = 80
          [32m+[0m[0m ip       = "0.0.0.0"
          [32m+[0m[0m protocol = "tcp"
        }
    }

[1m  # docker_image.nginx[0m will be created
[0m  [32m+[0m[0m resource "docker_image" "nginx" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m latest      = (known after apply)
      [32m+[0m[0m name        = "nginx:latest"
      [32m+[0m[0m output      = (known after apply)
      [32m+[0m[0m repo_digest = (known after apply)
    }

[1mPlan:[0m 2 to add, 0 to change, 0 to destroy.
[0m[0m[1mdocker_image.nginx: Creating...[0m[0m
[0m[1mdocker_image.nginx: Still creating... [00m10s elapsed][0m[0m
[0m[1mdocker_image.nginx: Still creating... [00m20s elapsed][0m[0m
[0m[1mdocker_image.nginx: Still creating... [00m30s elapsed][0m[0m
[0m[1mdocker_image.nginx: Creation complete after 33s [id=sha256:84ec966e61a8c7846f509da7eb081c55c1d56817448728924a87ab32f12a72fbnginx:latest][0m
[0m[1mdocker_container.nginx: Creating...[0m[0m
[0m[1mdocker_container.nginx: Creation complete after 1s [id=c26299512292139bd0726b8ed57266ab6c5c8d67e14e3e30a8615922e9b924fb][0m
[0m[1m[32m
Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
[0mCONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                  NAMES
c26299512292   nginx:latest   "/docker-entrypoint.â€¦"   18 seconds ago   Up 18 seconds   0.0.0.0:8080->80/tcp   my-nginx-container
docker_container.nginx
docker_image.nginx
[0m[1mdocker_image.nginx: Refreshing state... [id=sha256:84ec966e61a8c7846f509da7eb081c55c1d56817448728924a87ab32f12a72fbnginx:latest][0m
[0m[1mdocker_container.nginx: Refreshing state... [id=c26299512292139bd0726b8ed57266ab6c5c8d67e14e3e30a8615922e9b924fb][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [31m-[0m destroy[0m

Terraform will perform the following actions:

[1m  # docker_container.nginx[0m will be [1m[31mdestroyed[0m
[0m  [31m-[0m[0m resource "docker_container" "nginx" {
      [31m-[0m[0m attach            = false [90m-> null[0m[0m
      [31m-[0m[0m command           = [
          [31m-[0m[0m "nginx",
          [31m-[0m[0m "-g",
          [31m-[0m[0m "daemon off;",
        ] [90m-> null[0m[0m
      [31m-[0m[0m cpu_shares        = 0 [90m-> null[0m[0m
      [31m-[0m[0m dns               = [] [90m-> null[0m[0m
      [31m-[0m[0m dns_opts          = [] [90m-> null[0m[0m
      [31m-[0m[0m dns_search        = [] [90m-> null[0m[0m
      [31m-[0m[0m entrypoint        = [
          [31m-[0m[0m "/docker-entrypoint.sh",
        ] [90m-> null[0m[0m
      [31m-[0m[0m env               = [] [90m-> null[0m[0m
      [31m-[0m[0m gateway           = "172.17.0.1" [90m-> null[0m[0m
      [31m-[0m[0m group_add         = [] [90m-> null[0m[0m
      [31m-[0m[0m hostname          = "c26299512292" [90m-> null[0m[0m
      [31m-[0m[0m id                = "c26299512292139bd0726b8ed57266ab6c5c8d67e14e3e30a8615922e9b924fb" [90m-> null[0m[0m
      [31m-[0m[0m image             = "sha256:84ec966e61a8c7846f509da7eb081c55c1d56817448728924a87ab32f12a72fb" [90m-> null[0m[0m
      [31m-[0m[0m init              = false [90m-> null[0m[0m
      [31m-[0m[0m ip_address        = "172.17.0.2" [90m-> null[0m[0m
      [31m-[0m[0m ip_prefix_length  = 16 [90m-> null[0m[0m
      [31m-[0m[0m ipc_mode          = "private" [90m-> null[0m[0m
      [31m-[0m[0m links             = [] [90m-> null[0m[0m
      [31m-[0m[0m log_driver        = "json-file" [90m-> null[0m[0m
      [31m-[0m[0m log_opts          = {} [90m-> null[0m[0m
      [31m-[0m[0m logs              = false [90m-> null[0m[0m
      [31m-[0m[0m max_retry_count   = 0 [90m-> null[0m[0m
      [31m-[0m[0m memory            = 0 [90m-> null[0m[0m
      [31m-[0m[0m memory_swap       = 0 [90m-> null[0m[0m
      [31m-[0m[0m must_run          = true [90m-> null[0m[0m
      [31m-[0m[0m name              = "my-nginx-container" [90m-> null[0m[0m
      [31m-[0m[0m network_data      = [
          [31m-[0m[0m {
              [31m-[0m[0m gateway                   = "172.17.0.1"
              [31m-[0m[0m global_ipv6_prefix_length = 0
              [31m-[0m[0m ip_address                = "172.17.0.2"
              [31m-[0m[0m ip_prefix_length          = 16
              [31m-[0m[0m network_name              = "bridge"
                [90m# (2 unchanged attributes hidden)[0m[0m
            },
        ] [90m-> null[0m[0m
      [31m-[0m[0m network_mode      = "bridge" [90m-> null[0m[0m
      [31m-[0m[0m privileged        = false [90m-> null[0m[0m
      [31m-[0m[0m publish_all_ports = false [90m-> null[0m[0m
      [31m-[0m[0m read_only         = false [90m-> null[0m[0m
      [31m-[0m[0m remove_volumes    = true [90m-> null[0m[0m
      [31m-[0m[0m restart           = "no" [90m-> null[0m[0m
      [31m-[0m[0m rm                = false [90m-> null[0m[0m
      [31m-[0m[0m security_opts     = [] [90m-> null[0m[0m
      [31m-[0m[0m shm_size          = 64 [90m-> null[0m[0m
      [31m-[0m[0m start             = true [90m-> null[0m[0m
      [31m-[0m[0m stdin_open        = false [90m-> null[0m[0m
      [31m-[0m[0m sysctls           = {} [90m-> null[0m[0m
      [31m-[0m[0m tmpfs             = {} [90m-> null[0m[0m
      [31m-[0m[0m tty               = false [90m-> null[0m[0m
        [90m# (7 unchanged attributes hidden)[0m[0m

      [31m-[0m[0m ports {
          [31m-[0m[0m external = 8080 [90m-> null[0m[0m
          [31m-[0m[0m internal = 80 [90m-> null[0m[0m
          [31m-[0m[0m ip       = "0.0.0.0" [90m-> null[0m[0m
          [31m-[0m[0m protocol = "tcp" [90m-> null[0m[0m
        }
    }

[1m  # docker_image.nginx[0m will be [1m[31mdestroyed[0m
[0m  [31m-[0m[0m resource "docker_image" "nginx" {
      [31m-[0m[0m id          = "sha256:84ec966e61a8c7846f509da7eb081c55c1d56817448728924a87ab32f12a72fbnginx:latest" [90m-> null[0m[0m
      [31m-[0m[0m latest      = "sha256:84ec966e61a8c7846f509da7eb081c55c1d56817448728924a87ab32f12a72fb" [90m-> null[0m[0m
      [31m-[0m[0m name        = "nginx:latest" [90m-> null[0m[0m
      [31m-[0m[0m repo_digest = "nginx@sha256:84ec966e61a8c7846f509da7eb081c55c1d56817448728924a87ab32f12a72fb" [90m-> null[0m[0m
    }

[1mPlan:[0m 0 to add, 0 to change, 2 to destroy.
[0m[0m[1mdocker_container.nginx: Destroying... [id=c26299512292139bd0726b8ed57266ab6c5c8d67e14e3e30a8615922e9b924fb][0m[0m
[0m[1mdocker_container.nginx: Destruction complete after 1s[0m
[0m[1mdocker_image.nginx: Destroying... [id=sha256:84ec966e61a8c7846f509da7eb081c55c1d56817448728924a87ab32f12a72fbnginx:latest][0m[0m
[0m[1mdocker_image.nginx: Destruction complete after 0s[0m
[0m[1m[32m
Destroy complete! Resources: 2 destroyed.
[0m